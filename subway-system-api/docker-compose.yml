services:
  # These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
  app:
    build: .
    depends_on:
      # Make sure the database is loaded first
      - postgres
    ports:
      - "8080:8080"
    volumes:
      # Maps project directory `.` to working directory in the container
      - ./:/usr/src/app/
      - /usr/src/app/node_modules

  # Configurations for the PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the 
  # address of this container.
  postgres:
    image: postgres:15.2-alpine
    restart: always
    environment:
      # Environment vailables shared by images
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=root
    ports:
      # Standard port for PostgreSQL databases
      - "5432:5432"
    volumes:
      # When the PostgresSQL container is started it will run any scripts
      # provided in the `docker-entrypoint-initdb.d` directory, this connects
      # our seed file to that directory so that it gets run
      - ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql

  # PostgreSQL pgAdmin panel accessible at http://localhost:16543/
  pgadmin-compose:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@test.com"
      PGADMIN_DEFAULT_PASSWORD: "Password!"
    ports:
      - "16543:80"
    depends_on:
      - postgres
